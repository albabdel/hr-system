generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
enum Role { OWNER HR_ADMIN MANAGER EMPLOYEE }

model Tenant {
  id            String           @id @default(uuid())
  name          String
  slug          String           @unique
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  users         User[]
  departments   Department[]
  employees     Employee[]
  files         FileObject[]
  auditLogs     AuditLog[]
  refreshTokens RefreshToken[]
  employeeDocs  EmployeeDocument[]
  timeClocks    TimeClock[]
  leaveTypes    LeaveType[]
  leaveRequests LeaveRequest[]
  holidays      HolidayCalendar[]
  // LMS
  courses       Course[]
  modules       Module[]
  lessons       Lesson[]
  quizQuestions QuizQuestion[]
  enrollments   EnrollmentLms[]
  attempts      Attempt[]
  certificates  Certificate[]
}

model User {
  id            String   @id @default(uuid())
  tenantId      String
  email         String
  name          String
  role          Role
  passwordHash  String
  invitedAt     DateTime?
  lastLoginAt   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  tenant        Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdCourses Course[]
  enrollments   EnrollmentLms[]
  attempts      Attempt[]
  @@unique([tenantId, email], map: "user_email_per_tenant_unique")
  @@index([tenantId], map: "user_tenant_idx")
}

model Department {
  id        String   @id @default(uuid())
  tenantId  String
  name      String
  code      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tenant    Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  employees Employee[]
  @@unique([tenantId, name], map: "dept_name_per_tenant_unique")
  @@index([tenantId], map: "dept_tenant_idx")
}

model Employee {
  id           String     @id @default(uuid())
  tenantId     String
  userId       String?
  departmentId String?
  firstName    String
  lastName     String
  email        String
  position     String?
  hiredAt      DateTime?
  status       String      @default("ACTIVE")
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  tenant       Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user         User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  department   Department? @relation(fields: [departmentId], references: [id], onDelete: SetNull)
  documents    EmployeeDocument[]
  @@unique([tenantId, email], map: "employee_email_per_tenant_unique")
  @@index([tenantId], map: "employee_tenant_idx")
  @@index([tenantId, departmentId], map: "employee_dept_idx")
}

model FileObject {
  id              String   @id @default(uuid())
  tenantId        String
  bucket          String
  objectKey       String
  sizeBytes       Int
  contentType     String
  sha256          String?
  metadata        Json?
  createdByUserId String?
  createdAt       DateTime @default(now())
  tenant          Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  employeeLinks   EmployeeDocument[]
  @@index([tenantId], map: "file_tenant_idx")
  @@unique([tenantId, bucket, objectKey], map: "file_unique_per_tenant")
}

model AuditLog {
  id          String   @id @default(uuid())
  tenantId    String
  actorUserId String?
  entity      String
  entityId    String
  action      String
  before      Json?
  after       Json?
  ip          String?
  userAgent   String?
  createdAt   DateTime @default(now())
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  @@index([tenantId], map: "audit_tenant_idx")
  @@index([tenantId, entity], map: "audit_entity_idx")
}

model RefreshToken {
  id         String   @id @default(uuid())
  tenantId   String
  userId     String
  token      String   @unique
  revoked    Boolean  @default(false)
  createdAt  DateTime @default(now())
  expiresAt  DateTime
  tenant     Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([tenantId, userId])
}

model EmployeeDocument {
  id         String   @id @default(uuid())
  tenantId   String
  employeeId String
  fileId     String
  title      String?
  createdAt  DateTime @default(now())
  tenant   Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  employee Employee   @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  file     FileObject @relation(fields: [fileId], references: [id], onDelete: Cascade)
  @@index([tenantId, employeeId])
  @@index([tenantId, fileId])
}

model TimeClock {
  id        String   @id @default(uuid())
  tenantId  String
  userId    String
  clockIn   DateTime
  clockOut  DateTime?
  durationM Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([tenantId, userId, clockIn])
  @@index([tenantId, userId, clockOut])
}

model LeaveType {
  id               String   @id @default(uuid())
  tenantId         String
  name             String
  code             String
  daysPerYear      Float    @default(20)
  allowHalfDays    Boolean  @default(true)
  allowOnHolidays  Boolean  @default(false)
  requiresApproval Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  tenant           Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  @@unique([tenantId, code], map: "leavetype_code_per_tenant")
  @@index([tenantId, name])
}

enum LeaveStatus { PENDING APPROVED REJECTED CANCELED }

model LeaveRequest {
  id          String      @id @default(uuid())
  tenantId    String
  userId      String
  typeId      String
  startDate   DateTime
  endDate     DateTime
  hours       Float?
  status      LeaveStatus @default(PENDING)
  reason      String?
  approverId  String?
  decidedAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        LeaveType @relation(fields: [typeId], references: [id], onDelete: Cascade)
  @@index([tenantId, userId, startDate, endDate])
  @@index([tenantId, status])
}

model HolidayCalendar {
  id        String   @id @default(uuid())
  tenantId  String
  date      DateTime @db.Date
  name      String
  createdAt DateTime @default(now())
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  @@unique([tenantId, date], map: "holiday_unique_per_day")
  @@index([tenantId, date])
}

// LMS Models
enum LessonType { video text quiz }
enum EnrollmentStatus { enrolled completed }

model Course {
  id              String          @id @default(uuid())
  tenantId        String
  title           String
  description     String?
  createdByUserId String
  createdAt       DateTime        @default(now())
  tenant          Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  creator         User            @relation(fields: [createdByUserId], references: [id])
  modules         Module[]
  enrollments     EnrollmentLms[]
  @@index([tenantId])
}

model Module {
  id         String   @id @default(uuid())
  tenantId   String
  courseId   String
  title      String
  orderIndex Int
  createdAt  DateTime @default(now())
  tenant     Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons    Lesson[]
  @@index([tenantId, courseId])
}

model Lesson {
  id         String       @id @default(uuid())
  tenantId   String
  moduleId   String
  title      String
  type       LessonType
  content    Json?
  orderIndex Int
  createdAt  DateTime     @default(now())
  tenant     Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  module     Module       @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  questions  QuizQuestion[]
  attempts   Attempt[]
  @@index([tenantId, moduleId])
}

model QuizQuestion {
  id             String   @id @default(uuid())
  tenantId       String
  lessonId       String
  questionText   String
  options        Json
  correctAnswers Json
  tenant         Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  lesson         Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  @@index([tenantId, lessonId])
}

model EnrollmentLms {
  id          String           @id @default(uuid())
  tenantId    String
  courseId    String
  userId      String
  status      EnrollmentStatus @default(enrolled)
  startedAt   DateTime         @default(now())
  completedAt DateTime?
  tenant      Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  course      Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  certificate Certificate?
  @@unique([tenantId, courseId, userId])
}

model Attempt {
  id          String    @id @default(uuid())
  tenantId    String
  lessonId    String
  userId      String
  score       Float?
  answers     Json?
  startedAt   DateTime  @default(now())
  completedAt DateTime?
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  lesson      Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([tenantId, lessonId, userId])
}

model Certificate {
  id           String        @id @default(uuid())
  tenantId     String
  enrollmentId String        @unique
  url          String?
  issuedAt     DateTime      @default(now())
  tenant       Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  enrollment   EnrollmentLms @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  @@index([tenantId])
}
