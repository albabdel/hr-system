import request from 'supertest';
import jwt from 'jsonwebtoken';
import { createApp } from '../src/app.js';
import { prisma } from '../src/db.js';

const JWT_SECRET = process.env.JWT_SECRET || 'dev_jwt_secret_change_me';

function token(sub: string, role: string, tid: string) {
  return jwt.sign({ sub, role, tid, typ: 'access' }, JWT_SECRET, { expiresIn: '10m' });
}

async function getTid() {
  const t = await prisma.tenant.findUnique({ where: { slug: 'acme' } });
  if (!t) throw new Error('seed tenant missing');
  return t.id;
}

describe('Payroll core', () => {
  const { app } = createApp();
  let tid = '';
  beforeAll(async () => { tid = await getTid(); });

  test('calendar -> run -> calc -> submit -> approve -> finalize', async () => {
    const admin = token('hr', 'HR_ADMIN', tid);

    const cal = await request(app)
      .post('/v1/payroll/calendars')
      .set('authorization', `Bearer ${admin}`)
      .set('x-tenant-test', tid)
      .send({ name: 'Monthly', frequency: 'MONTHLY', dayOfMonth: 28, cutoffOffsetDays: -3 })
      .expect(201);

    const run = await request(app)
      .post('/v1/payroll/runs')
      .set('authorization', `Bearer ${admin}`)
      .set('x-tenant-test', tid)
      .send({
        calendarId: cal.body.id,
        periodStart: new Date('2025-09-01').toISOString(),
        periodEnd: new Date('2025-09-30').toISOString()
      })
      .expect(201);

    await request(app)
      .post(`/v1/payroll/runs/${run.body.id}/calc`)
      .set('authorization', `Bearer ${admin}`)
      .set('x-tenant-test', tid)
      .expect(200);

    const afterCalc = await request(app)
      .get(`/v1/payroll/runs/${run.body.id}`)
      .set('authorization', `Bearer ${admin}`)
      .set('x-tenant-test', tid)
      .expect(200);
    expect((afterCalc.body.payslips || []).length).toBeGreaterThan(0);

    await request(app).post(`/v1/payroll/runs/${run.body.id}/submit`).set('authorization', `Bearer ${admin}`).set('x-tenant-test', tid).expect(200);
    await request(app).post(`/v1/payroll/runs/${run.body.id}/approve`).set('authorization', `Bearer ${admin}`).set('x-tenant-test', tid).expect(200);

    // Finalize (PDFs are generated by worker in real env; in tests we don't require PDFs)
    await request(app).post(`/v1/payroll/runs/${run.body.id}/finalize`).set('authorization', `Bearer ${admin}`).set('x-tenant-test', tid).expect(200);

    const final = await request(app)
      .get(`/v1/payroll/runs/${run.body.id}`)
      .set('authorization', `Bearer ${admin}`)
      .set('x-tenant-test', tid)
      .expect(200);
    expect(final.body.status).toBe('FINALIZED');
  });

  test('payslip pdf url returns 404 if not generated', async () => {
    const admin = token('hr2', 'HR_ADMIN', tid);
    const anySlip = await prisma.payslip.findFirst({ where: { tenantId: tid } });
    if (anySlip) {
      await request(app)
        .get(`/v1/payslips/${anySlip.id}/pdf-url`)
        .set('authorization', `Bearer ${admin}`)
        .set('x-tenant-test', tid)
        .expect(404);
    }
  });
});
