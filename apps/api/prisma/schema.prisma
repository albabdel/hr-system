
generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role { OWNER HR_ADMIN MANAGER EMPLOYEE }
enum PayrollFrequency { MONTHLY BIWEEKLY WEEKLY CUSTOM }
enum PayrollRunStatus { DRAFT REVIEW APPROVED FINALIZED }
enum ExportJobStatus { QUEUED RUNNING DONE ERROR }
enum PlanCode { BASIC PRO ENTERPRISE }
enum SubscriptionStatus { INCOMPLETE TRIALING ACTIVE PAST_DUE CANCELED UNPAID }
enum IntegrationType { SLACK_WEBHOOK TEAMS_WEBHOOK SMTP }
enum NotificationChannel { SLACK TEAMS EMAIL }
enum NotificationStatus { QUEUED SENT FAILED }

model Tenant {
  id            String           @id @default(uuid())
  name          String
  slug          String           @unique
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  users         User[]
  departments   Department[]
  employees     Employee[]
  files         FileObject[]
  auditLogs     AuditLog[]
  refreshTokens RefreshToken[]
  employeeDocs  EmployeeDocument[]
  timeClocks    TimeClock[]
  leaveTypes    LeaveType[]
  leaveRequests LeaveRequest[]
  holidays      HolidayCalendar[]
  payrollCalendars PayrollCalendar[]
  payrollRuns      PayrollRun[]
  payslips         Payslip[]
  exportJobs       ExportJob[]
  subscription     BillingSubscription?
  integrations     Integration[]
  notifications    NotificationLog[]
}

model User {
  id            String   @id @default(uuid())
  tenantId      String
  email         String
  name          String
  role          Role
  passwordHash  String
  invitedAt     DateTime?
  lastLoginAt   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  tenant        Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  @@unique([tenantId, email], map: "user_email_per_tenant_unique")
  @@index([tenantId], map: "user_tenant_idx")
}

model Department {
  id        String   @id @default(uuid())
  tenantId  String
  name      String
  code      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tenant    Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  employees Employee[]
  @@unique([tenantId, name], map: "dept_name_per_tenant_unique")
  @@index([tenantId], map: "dept_tenant_idx")
}

model Employee {
  id           String     @id @default(uuid())
  tenantId     String
  userId       String?
  departmentId String?
  firstName    String
  lastName     String
  email        String
  position     String?
  hiredAt      DateTime?
  terminatedAt DateTime?
  status       String      @default("ACTIVE")
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  tenant       Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user         User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  department   Department? @relation(fields: [departmentId], references: [id], onDelete: SetNull)
  documents    EmployeeDocument[]
  payslips     Payslip[]
  @@unique([tenantId, email], map: "employee_email_per_tenant_unique")
  @@index([tenantId, departmentId], map: "employee_dept_idx")
}

model FileObject {
  id              String   @id @default(uuid())
  tenantId        String
  bucket          String
  objectKey       String
  sizeBytes       Int
  contentType     String
  sha256          String?
  metadata        Json?
  createdByUserId String?
  createdAt       DateTime @default(now())
  tenant          Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  employeeLinks   EmployeeDocument[]
  payslipPdfOf    Payslip[]
  @@index([tenantId], map: "file_tenant_idx")
  @@unique([tenantId, bucket, objectKey], map: "file_unique_per_tenant")
}

model AuditLog {
  id          String   @id @default(uuid())
  tenantId    String
  actorUserId String?
  entity      String
  entityId    String
  action      String
  before      Json?
  after       Json?
  ip          String?
  userAgent   String?
  createdAt   DateTime @default(now())
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  @@index([tenantId], map: "audit_tenant_idx")
  @@index([tenantId, entity], map: "audit_entity_idx")
}

model RefreshToken {
  id         String   @id @default(uuid())
  tenantId   String
  userId     String
  token      String   @unique
  revoked    Boolean  @default(false)
  createdAt  DateTime @default(now())
  expiresAt  DateTime
  tenant     Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([tenantId, userId])
}

model EmployeeDocument {
  id         String   @id @default(uuid())
  tenantId   String
  employeeId String
  fileId     String
  title      String?
  createdAt  DateTime @default(now())
  tenant   Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  employee Employee   @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  file     FileObject @relation(fields: [fileId], references: [id], onDelete: Cascade)
  @@index([tenantId, employeeId])
  @@index([tenantId, fileId])
}

model TimeClock {
  id        String   @id @default(uuid())
  tenantId  String
  userId    String
  clockIn   DateTime
  clockOut  DateTime?
  durationM Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([tenantId, userId, clockIn])
  @@index([tenantId, userId, clockOut])
}

model LeaveType {
  id               String   @id @default(uuid())
  tenantId         String
  name             String
  code             String
  daysPerYear      Float    @default(20)
  allowHalfDays    Boolean  @default(true)
  allowOnHolidays  Boolean  @default(false)
  requiresApproval Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  @@unique([tenantId, code], map: "leavetype_code_per_tenant")
  @@index([tenantId, name])
}

enum LeaveStatus { PENDING APPROVED REJECTED CANCELED }

model LeaveRequest {
  id          String      @id @default(uuid())
  tenantId    String
  userId      String
  typeId      String
  startDate   DateTime
  endDate     DateTime
  hours       Float?
  status      LeaveStatus @default(PENDING)
  reason      String?
  approverId  String?
  decidedAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tenant   Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  type     LeaveType @relation(fields: [typeId], references: [id], onDelete: Cascade)
  @@index([tenantId, userId, startDate, endDate])
  @@index([tenantId, status])
}

model HolidayCalendar {
  id        String   @id @default(uuid())
  tenantId  String
  date      DateTime
  name      String
  createdAt DateTime @default(now())
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  @@unique([tenantId, date], map: "holiday_unique_per_day")
  @@index([tenantId, date])
}

model PayrollCalendar {
  id         String           @id @default(uuid())
  tenantId   String
  name       String
  frequency  PayrollFrequency
  dayOfMonth Int?
  cutoffOffsetDays Int?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  tenant     Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  runs       PayrollRun[]
  @@index([tenantId, name])
}

model PayrollRun {
  id          String            @id @default(uuid())
  tenantId    String
  calendarId  String
  periodStart DateTime
  periodEnd   DateTime
  status      PayrollRunStatus  @default(DRAFT)
  totals      Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tenant      Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  calendar    PayrollCalendar @relation(fields: [calendarId], references: [id], onDelete: Cascade)
  payslips    Payslip[]
  @@index([tenantId, status])
  @@index([tenantId, periodStart, periodEnd])
}

model Payslip {
  id         String   @id @default(uuid())
  tenantId   String
  runId      String
  employeeId String
  currency   String   @default("USD")
  gross      Decimal  @default(0)
  taxes      Decimal  @default(0)
  net        Decimal  @default(0)
  pdfFileId  String?
  createdAt  DateTime @default(now())
  tenant     Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  run        PayrollRun @relation(fields: [runId], references: [id], onDelete: Cascade)
  employee   Employee   @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  pdfFile    FileObject? @relation(fields: [pdfFileId], references: [id], onDelete: SetNull)
  @@index([tenantId, runId])
  @@index([tenantId, employeeId])
}

model ExportJob {
  id        String          @id @default(uuid())
  tenantId  String
  type      String
  params    Json?
  status    ExportJobStatus @default(QUEUED)
  fileId    String?
  error     String?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  tenant    Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  file      FileObject?     @relation(fields: [fileId], references: [id], onDelete: SetNull)
  @@index([tenantId, type, status])
}

model BillingSubscription {
  id                   String             @id @default(uuid())
  tenantId             String             @unique
  plan                 PlanCode
  status               SubscriptionStatus @default(INCOMPLETE)
  seats                Int                @default(1)
  stripeCustomerId     String?
  stripeSubscriptionId String?
  currentPeriodStart   DateTime?
  currentPeriodEnd     DateTime?
  cancelAtPeriodEnd    Boolean            @default(false)
  delinquent           Boolean            @default(false)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  tenant               Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  @@index([status])
}

model Integration {
  id         String          @id @default(uuid())
  tenantId   String
  type       IntegrationType
  name       String
  isEnabled  Boolean         @default(true)
  config     Json
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  tenant     Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  @@unique([tenantId, type], map: "integration_one_per_type_per_tenant")
  @@index([tenantId, type])
}

model NotificationLog {
  id         String              @id @default(uuid())
  tenantId   String
  channel    NotificationChannel
  status     NotificationStatus  @default(QUEUED)
  target     String?
  subject    String?
  body       String?
  error      String?
  attempts   Int                 @default(0)
  createdAt  DateTime            @default(now())
  deliveredAt DateTime?
  tenant     Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  @@index([tenantId, channel, status])
}
